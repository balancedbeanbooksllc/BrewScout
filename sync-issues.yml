
name: Sync Issues & Project (BrewScout)

on:
  workflow_dispatch:
  push:
    paths:
      - 'BrewScout-Issues.json'
      - '.github/workflows/sync-issues.yml'
  schedule:
    - cron: '0 9 * * 1-5'  # Weekdays at 09:00 UTC

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      projects: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Sync Issues and Add to Project
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PROJECT_TITLE: ${{ vars.PROJECT_TITLE }}
          OWNER_LOGIN: ${{ vars.OWNER_LOGIN }}
          OWNER_TYPE: ${{ vars.OWNER_TYPE }}
          ISSUES_JSON_PATH: BrewScout-Issues.json
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const path = process.env.ISSUES_JSON_PATH || 'BrewScout-Issues.json';
            const ownerLogin = process.env.OWNER_LOGIN;
            const ownerType = process.env.OWNER_TYPE || 'user';
            const projectTitle = process.env.PROJECT_TITLE || 'BrewScout Project Board';
            if (!ownerLogin) core.setFailed('OWNER_LOGIN is required as a repo variable.');
            const issues = JSON.parse(fs.readFileSync(path, 'utf8'));

            async function ensureMilestone(title) {
              const { data: milestones } = await github.rest.issues.listMilestones({
                owner: context.repo.owner, repo: context.repo.repo, state: 'open'
              });
              const found = milestones.find(m => m.title === title);
              if (found) return found.number;
              const created = await github.rest.issues.createMilestone({
                owner: context.repo.owner, repo: context.repo.repo, title
              });
              return created.data.number;
            }

            async function getProjectId() {
              if (ownerType === 'org') {
                const res = await github.graphql(`
                  query($login: String!) {
                    organization(login: $login) {
                      projectsV2(first: 20) { nodes { id title } }
                    }
                  }`,
                  { login: ownerLogin }
                );
                const found = res.organization.projectsV2.nodes.find(n => n.title === projectTitle);
                if (found) return found.id;
                core.setFailed(`Project "${projectTitle}" not found on org "${ownerLogin}"`);
              } else {
                const res = await github.graphql(`
                  query {
                    viewer { projectsV2(first: 20) { nodes { id title } } }
                  }`
                );
                const found = res.viewer.projectsV2.nodes.find(n => n.title === projectTitle);
                if (found) return found.id;
                core.setFailed(`Project "${projectTitle}" not found for viewer`);
              }
            }

            const projectId = await getProjectId();

            for (const it of issues) {
              const search = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open in:title \"${it.title}\"`
              });
              let issueNumber;
              if (search.data.items?.length) {
                issueNumber = search.data.items[0].number;
              } else {
                const milestoneNumber = it.milestone ? await ensureMilestone(it.milestone) : undefined;
                const created = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: it.title,
                  body: it.body || '',
                  labels: it.labels || [],
                  milestone: milestoneNumber
                });
                issueNumber = created.data.number;
              }

              const res = await github.graphql(`
                query($owner:String!, $repo:String!, $number:Int!) {
                  repository(owner:$owner, name:$repo) {
                    issue(number:$number) { id }
                  }
                }`,
                { owner: context.repo.owner, repo: context.repo.repo, number: issueNumber }
              );
              const issueNodeId = res.repository.issue.id;

              await github.graphql(`
                mutation($project:ID!, $content:ID!) {
                  addProjectV2ItemById(input: { projectId: $project, contentId: $content }) {
                    item { id }
                  }
                }`,
                { project: projectId, content: issueNodeId }
              );
            }
